{"version":3,"file":"ClientConfigurationError.js","sources":["../../../../../../node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs"],"sourcesContent":["/*! @azure/msal-common v14.6.1 2024-01-23 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { redirectUriEmpty, claimsRequestParsingError, authorityUriInsecure, urlParseError, urlEmptyError, emptyInputScopesError, invalidPromptValue, invalidClaims, tokenRequestEmpty, logoutRequestEmpty, invalidCodeChallengeMethod, pkceParamsMissing, invalidCloudDiscoveryMetadata, invalidAuthorityMetadata, untrustedAuthority, missingSshJwk, missingSshKid, missingNonceAuthenticationHeader, invalidAuthenticationHeader, cannotSetOIDCOptions, cannotAllowNativeBroker, authorityMismatch } from './ClientConfigurationErrorCodes.mjs';\nimport * as ClientConfigurationErrorCodes from './ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst ClientConfigurationErrorMessages = {\n    [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n    [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n    [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [urlParseError]: \"URL could not be parsed into appropriate segments.\",\n    [urlEmptyError]: \"URL was empty or null.\",\n    [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n    [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n    [logoutRequestEmpty]: \"The logout request was null or undefined.\",\n    [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n    [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [cannotAllowNativeBroker]: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n};\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use ClientConfigurationErrorCodes instead\n */\nconst ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[redirectUriEmpty],\n    },\n    claimsRequestParsingError: {\n        code: claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[claimsRequestParsingError],\n    },\n    authorityUriInsecure: {\n        code: authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[authorityUriInsecure],\n    },\n    urlParseError: {\n        code: urlParseError,\n        desc: ClientConfigurationErrorMessages[urlParseError],\n    },\n    urlEmptyError: {\n        code: urlEmptyError,\n        desc: ClientConfigurationErrorMessages[urlEmptyError],\n    },\n    emptyScopesError: {\n        code: emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[emptyInputScopesError],\n    },\n    invalidPrompt: {\n        code: invalidPromptValue,\n        desc: ClientConfigurationErrorMessages[invalidPromptValue],\n    },\n    invalidClaimsRequest: {\n        code: invalidClaims,\n        desc: ClientConfigurationErrorMessages[invalidClaims],\n    },\n    tokenRequestEmptyError: {\n        code: tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[tokenRequestEmpty],\n    },\n    logoutRequestEmptyError: {\n        code: logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[logoutRequestEmpty],\n    },\n    invalidCodeChallengeMethod: {\n        code: invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod],\n    },\n    invalidCodeChallengeParams: {\n        code: pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[pkceParamsMissing],\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata],\n    },\n    invalidAuthorityMetadata: {\n        code: invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata],\n    },\n    untrustedAuthority: {\n        code: untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[untrustedAuthority],\n    },\n    missingSshJwk: {\n        code: missingSshJwk,\n        desc: ClientConfigurationErrorMessages[missingSshJwk],\n    },\n    missingSshKid: {\n        code: missingSshKid,\n        desc: ClientConfigurationErrorMessages[missingSshKid],\n    },\n    missingNonceAuthenticationHeader: {\n        code: missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader],\n    },\n    invalidAuthenticationHeader: {\n        code: invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader],\n    },\n    cannotSetOIDCOptions: {\n        code: cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions],\n    },\n    cannotAllowNativeBroker: {\n        code: cannotAllowNativeBroker,\n        desc: ClientConfigurationErrorMessages[cannotAllowNativeBroker],\n    },\n    authorityMismatch: {\n        code: authorityMismatch,\n        desc: ClientConfigurationErrorMessages[authorityMismatch],\n    },\n};\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nclass ClientConfigurationError extends AuthError {\n    constructor(errorCode) {\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\nfunction createClientConfigurationError(errorCode) {\n    return new ClientConfigurationError(errorCode);\n}\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, ClientConfigurationErrorMessages, createClientConfigurationError };\n//# sourceMappingURL=ClientConfigurationError.mjs.map\n"],"names":["redirectUriEmpty","claimsRequestParsingError","authorityUriInsecure","urlParseError","urlEmptyError","emptyInputScopesError","invalidPromptValue","invalidClaims","tokenRequestEmpty","logoutRequestEmpty","invalidCodeChallengeMethod","pkceParamsMissing","invalidCloudDiscoveryMetadata","invalidAuthorityMetadata","untrustedAuthority","missingSshJwk","missingSshKid","missingNonceAuthenticationHeader","invalidAuthenticationHeader","cannotSetOIDCOptions","cannotAllowNativeBroker","authorityMismatch","AuthError"],"mappings":";;;;;;;AAAA;AAMA;AACA;AACA;AACA;AACA;AACK,MAAC,gCAAgC,GAAG;AACzC,IAAI,CAACA,8CAAgB,GAAG,kEAAkE;AAC1F,IAAI,CAACC,uDAAyB,GAAG,kDAAkD;AACnF,IAAI,CAACC,kDAAoB,GAAG,2NAA2N;AACvP,IAAI,CAACC,2CAAa,GAAG,oDAAoD;AACzE,IAAI,CAACC,2CAAa,GAAG,wBAAwB;AAC7C,IAAI,CAACC,mDAAqB,GAAG,gHAAgH;AAC7I,IAAI,CAACC,gDAAkB,GAAG,sLAAsL;AAChN,IAAI,CAACC,2CAAa,GAAG,2DAA2D;AAChF,IAAI,CAACC,+CAAiB,GAAG,iDAAiD;AAC1E,IAAI,CAACC,gDAAkB,GAAG,2CAA2C;AACrE,IAAI,CAACC,wDAA0B,GAAG,+EAA+E;AACjH,IAAI,CAACC,+CAAiB,GAAG,qGAAqG;AAC9H,IAAI,CAACC,2DAA6B,GAAG,qIAAqI;AAC1K,IAAI,CAACC,sDAAwB,GAAG,yIAAyI;AACzK,IAAI,CAACC,gDAAkB,GAAG,4HAA4H;AACtJ,IAAI,CAACC,2CAAa,GAAG,6HAA6H;AAClJ,IAAI,CAACC,2CAAa,GAAG,uJAAuJ;AAC5K,IAAI,CAACC,8DAAgC,GAAG,gLAAgL;AACxN,IAAI,CAACC,yDAA2B,GAAG,wCAAwC;AAC3E,IAAI,CAACC,kDAAoB,GAAG,6GAA6G;AACzI,IAAI,CAACC,qDAAuB,GAAG,+EAA+E;AAC9G,IAAI,CAACC,+CAAiB,GAAG,kPAAkP;AAC3Q,EAAE;AA+FF;AACA;AACA;AACA,MAAM,wBAAwB,SAASC,mBAAS,CAAC;AACjD,IAAI,WAAW,CAAC,SAAS,EAAE;AAC3B,QAAQ,KAAK,CAAC,SAAS,EAAE,gCAAgC,CAAC,SAAS,CAAC,CAAC,CAAC;AACtE,QAAQ,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC;AAC/C,QAAQ,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,wBAAwB,CAAC,SAAS,CAAC,CAAC;AACxE,KAAK;AACL,CAAC;AACD,SAAS,8BAA8B,CAAC,SAAS,EAAE;AACnD,IAAI,OAAO,IAAI,wBAAwB,CAAC,SAAS,CAAC,CAAC;AACnD;;;;;;","x_google_ignoreList":[0]}